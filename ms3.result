adding scope 
FuncDecl
block
adding scope 
VarDecl
VarDecl
VarDecl
VarDecl
VarDecl
VarDecl
BinaryExpr
BinaryExpr
FuncCall
removing scope 
FuncDecl
block
adding scope 
BinaryExpr
removing scope 
GlobVarDecl
3
main
3
i
3
j
3
k
3
z
3
a
3
b
3
i
3
j
3
i
3
test
1
3
test
3
k
3
k
1
3
k
3
Program <symbol addr: 0xa45500>
    FuncDecl @ line 1 @ col 1
        Ident [main] sig=f() @ line 1 @ col 6 <symbol addr: 0xa45500>
        FuncSign
            Params
            Type [$void] <symbol addr: 0xa420d0>
        Block
            VarDecl @ line 2 @ col 5
                Ident [i] sig=int @ line 2 @ col 9 <symbol addr: 0xa456e0>
                Type [int] @ line 2 @ col 11 <symbol addr: 0xa422b0>
            VarDecl @ line 3 @ col 5
                Ident [j] sig=int @ line 3 @ col 9 <symbol addr: 0xa457f0>
                Type [int] @ line 3 @ col 11 <symbol addr: 0xa422b0>
            VarDecl @ line 4 @ col 5
                Ident [k] sig=bool @ line 4 @ col 9 <symbol addr: 0xa45890>
                Type [bool] @ line 4 @ col 11 <symbol addr: 0xa421c0>
            VarDecl @ line 5 @ col 5
                Ident [z] sig=bool @ line 5 @ col 9 <symbol addr: 0xa45930>
                Type [bool] @ line 5 @ col 11 <symbol addr: 0xa421c0>
            VarDecl @ line 6 @ col 5
                Ident [a] sig=string @ line 6 @ col 9 <symbol addr: 0xa459d0>
                Type [string] @ line 6 @ col 11 <symbol addr: 0xa423a0>
            VarDecl @ line 7 @ col 5
                Ident [b] sig=string @ line 7 @ col 9 <symbol addr: 0xa45a70>
                Type [string] @ line 7 @ col 11 <symbol addr: 0xa423a0>
            ExprStmt @ line 9 @ col 5
                BinaryExpr [<] sig=bool @ line 9 @ col 7
                    Ident [i] sig=int @ line 9 @ col 5 <symbol addr: 0xa456e0>
                    Ident [j] sig=int @ line 9 @ col 9 <symbol addr: 0xa457f0>
            ExprStmt @ line 10 @ col 5
                BinaryExpr [+] sig=int @ line 10 @ col 6
                    Ident [i] sig=int @ line 10 @ col 5 <symbol addr: 0xa456e0>
                    FuncCall sig=int @ line 10 @ col 7
                        Ident [test] sig=f(int) @ line 10 @ col 7 <symbol addr: 0xa455a0>
                        FuncArgs
                            IntLit [4] sig=int @ line 10 @ col 12
    FuncDecl @ line 16 @ col 1
        Ident [test] sig=f(int) @ line 16 @ col 6 <symbol addr: 0xa455a0>
        FuncSign
            Params
                ParamDecl @ line 16 @ col 11
                    Ident [k] sig=int @ line 16 @ col 11 <symbol addr: 0xa45bd0>
                    Type [int] @ line 16 @ col 13 <symbol addr: 0xa422b0>
            Type [int] @ line 16 @ col 18 <symbol addr: 0xa422b0>
        Block
            ReturnStmt @ line 17 @ col 5
                BinaryExpr [+] sig=int @ line 17 @ col 13
                    Ident [k] sig=int @ line 17 @ col 12 <symbol addr: 0xa45bd0>
                    IntLit [10] sig=int @ line 17 @ col 14
    GlobVarDecl @ line 20 @ col 1
        Ident [k] @ line 20 @ col 5 <symbol addr: 0xa45640>
        Type [string] sig=string @ line 20 @ col 7 <symbol addr: 0xa423a0>

adding scope 
FuncDecl
block
adding scope 
VarDecl
VarDecl
VarDecl
VarDecl
VarDecl
VarDecl
BinaryExpr
BinaryExpr
FuncCall
AssignStmt
