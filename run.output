Run started on Thu Feb 23 15:37:33 2023

Hostname: csx3.cs.ucalgary.ca

-------------------------------------------------------------------------------
Running make |
--------------

% /usr/bin/make

STDOUT:
make: 'golf' is up to date.


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Locating GoLF compiler |
------------------------

Compiler will be run as ./golf

-------------------------------------------------------------------------------
Test: too few arguments |
-------------------------

% ./golf

STDOUT:


STDERR:
error: : No input file provided


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: too many arguments |
--------------------------

% ./golf /dev/null /dev/zero

STDOUT:


STDERR:
error: : Too many input files provided


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: nonexistent file |
------------------------

% ./golf /i/do/not/exist

STDOUT:


STDERR:
error: /i/do/not/exist: Error opening input file


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: func open brace in wrong place |
--------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t1

STDOUT:


STDERR:
error: /home/profs/aycock/411/TEST/ms2/parse.t1:3:12: syntax error, unexpected ;, expecting {


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "for" open brace exception |
----------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t2

STDOUT:
Program
    FuncDecl @ line 4 @ col 1
        Ident [main] @ line 4 @ col 6
        FuncSign
            Params
            Type [$void]
        Block
            ForStmt @ line 5 @ col 2
                Ident [$true]
                Block
                    EmptyStmt @ line 6 @ col 3



STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: "for" open brace in wrong place |
---------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t3

STDOUT:


STDERR:
error: /home/profs/aycock/411/TEST/ms2/parse.t3:4:10: syntax error, unexpected ;, expecting { or ||


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "if" open brace in wrong place |
--------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t4

STDOUT:


STDERR:
error: /home/profs/aycock/411/TEST/ms2/parse.t4:4:9: syntax error, unexpected ;, expecting { or ||


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: weird but correct formatting |
------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t5

STDOUT:
Program
    FuncDecl @ line 3 @ col 1
        Ident [main] @ line 3 @ col 6
        FuncSign
            Params
            Type [$void]
        Block
            IfStmt
                BinaryExpr [==] @ line 6 @ col 5
                    BinaryExpr [+] @ line 5 @ col 7
                        IntLit [2] @ line 5 @ col 5
                        IntLit [3] @ line 6 @ col 3
                    IntLit [5] @ line 7 @ col 4
                Block
                    EmptyStmt @ line 7 @ col 7



STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: precedence check |
------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t6

STDOUT:
Program
    FuncDecl @ line 4 @ col 1
        Ident [foo] @ line 4 @ col 6
        FuncSign
            Params
            Type [asdf] @ line 4 @ col 12
        Block
            AssignStmt @ line 5 @ col 2
                Ident [x] @ line 5 @ col 2
                BinaryExpr [+] @ line 5 @ col 8
                    IntLit [2] @ line 5 @ col 6
                    BinaryExpr [*] @ line 5 @ col 12
                        IntLit [3] @ line 5 @ col 10
                        IntLit [5] @ line 5 @ col 14
            AssignStmt @ line 6 @ col 2
                Ident [y] @ line 6 @ col 2
                BinaryExpr [*] @ line 6 @ col 14
                    BinaryExpr [+] @ line 6 @ col 9
                        IntLit [2] @ line 6 @ col 7
                        IntLit [3] @ line 6 @ col 11
                    IntLit [5] @ line 6 @ col 16



STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: formal and actual params |
--------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t7

STDOUT:
Program
    FuncDecl @ line 3 @ col 1
        Ident [foo] @ line 3 @ col 6
        FuncSign
            Params
            Type [$void]
        Block
            EmptyStmt @ line 3 @ col 13
    FuncDecl @ line 6 @ col 1
        Ident [bar] @ line 6 @ col 6
        FuncSign
            Params
                ParamDecl @ line 6 @ col 10
                    Ident [a1] @ line 6 @ col 10
                    Type [int] @ line 6 @ col 13
                ParamDecl @ line 6 @ col 18
                    Ident [a2] @ line 6 @ col 18
                    Type [bool] @ line 6 @ col 21
                ParamDecl @ line 6 @ col 27
                    Ident [a3] @ line 6 @ col 27
                    Type [sometype] @ line 6 @ col 30
            Type [returntype] @ line 6 @ col 40
        Block
            EmptyStmt @ line 6 @ col 52
    FuncDecl @ line 9 @ col 1
        Ident [baz] @ line 9 @ col 6
        FuncSign
            Params
            Type [int] @ line 9 @ col 12
        Block
            ExprStmt @ line 10 @ col 2
                FuncCall @ line 10 @ col 2
                    Ident [blarg] @ line 10 @ col 2
                    FuncArgs
                        BinaryExpr [+] @ line 11 @ col 7
                            IntLit [123] @ line 11 @ col 3
                            IntLit [456] @ line 11 @ col 9
                        FuncCall @ line 12 @ col 3
                            Ident [garble] @ line 12 @ col 3
                            FuncArgs
                                IntLit [789] @ line 12 @ col 10
                        Ident [true] @ line 13 @ col 3
                        FuncCall @ line 14 @ col 3
                            Ident [greep] @ line 14 @ col 3
                            FuncArgs
                                Ident [false] @ line 14 @ col 9
                                StrLit ["eek"] @ line 14 @ col 16



STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: unary and binary minus |
------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t8

STDOUT:
Program
    FuncDecl @ line 3 @ col 1
        Ident [main] @ line 3 @ col 6
        FuncSign
            Params
            Type [$void]
        Block
            AssignStmt @ line 4 @ col 9
                Ident [x] @ line 4 @ col 9
                BinaryExpr [-] @ line 4 @ col 14
                    Ident [a] @ line 4 @ col 13
                    IntLit [-123] @ line 4 @ col 15
            AssignStmt @ line 5 @ col 9
                Ident [x] @ line 5 @ col 9
                BinaryExpr [-] @ line 5 @ col 14
                    Ident [a] @ line 5 @ col 13
                    IntLit [-123] @ line 5 @ col 15
            AssignStmt @ line 6 @ col 9
                Ident [x] @ line 6 @ col 9
                BinaryExpr [-] @ line 6 @ col 14
                    Ident [a] @ line 6 @ col 13
                    UnaryExpr [-] @ line 6 @ col 15
                        IntLit [-123] @ line 6 @ col 16
            AssignStmt @ line 7 @ col 9
                Ident [x] @ line 7 @ col 9
                BinaryExpr [-] @ line 7 @ col 14
                    Ident [a] @ line 7 @ col 13
                    UnaryExpr [-] @ line 7 @ col 15
                        Ident [b] @ line 7 @ col 16
            AssignStmt @ line 8 @ col 9
                Ident [x] @ line 8 @ col 9
                UnaryExpr [-] @ line 8 @ col 13
                    UnaryExpr [-] @ line 8 @ col 14
                        UnaryExpr [-] @ line 8 @ col 15
                            UnaryExpr [-] @ line 8 @ col 16
                                UnaryExpr [-] @ line 8 @ col 17
                                    UnaryExpr [-] @ line 8 @ col 18
                                        UnaryExpr [-] @ line 8 @ col 19
                                            Ident [x] @ line 8 @ col 20



STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: func open brace in wrong place, with semicolon |
------------------------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t9

STDOUT:


STDERR:
error: /home/profs/aycock/411/TEST/ms2/parse.t9:4:12: syntax error, unexpected ;, expecting {


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: func open brace with bonus semicolon |
--------------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t10

STDOUT:


STDERR:
error: /home/profs/aycock/411/TEST/ms2/parse.t10:4:12: syntax error, unexpected ;, expecting {


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "for" open brace in wrong place, with semicolon |
-------------------------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t11

STDOUT:


STDERR:
error: /home/profs/aycock/411/TEST/ms2/parse.t11:5:10: syntax error, unexpected ;, expecting { or ||


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "for" with bonus semicolon |
----------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t12

STDOUT:


STDERR:
error: /home/profs/aycock/411/TEST/ms2/parse.t12:5:10: syntax error, unexpected ;, expecting { or ||


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "if" open brace in wrong place, with semicolon |
------------------------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t13

STDOUT:


STDERR:
error: /home/profs/aycock/411/TEST/ms2/parse.t13:5:9: syntax error, unexpected ;, expecting { or ||


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "if" with bonus semicolon |
---------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t14

STDOUT:


STDERR:
error: /home/profs/aycock/411/TEST/ms2/parse.t14:5:9: syntax error, unexpected ;, expecting { or ||


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: func line breaks using trailing commas |
----------------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t15

STDOUT:
Program
    FuncDecl @ line 3 @ col 1
        Ident [foo] @ line 3 @ col 6
        FuncSign
            Params
                ParamDecl @ line 3 @ col 10
                    Ident [a] @ line 3 @ col 10
                    Type [int] @ line 3 @ col 12
                ParamDecl @ line 4 @ col 2
                    Ident [b] @ line 4 @ col 2
                    Type [int] @ line 4 @ col 4
                ParamDecl @ line 5 @ col 2
                    Ident [c] @ line 5 @ col 2
                    Type [int] @ line 5 @ col 4
            Type [$void]
        Block
            EmptyStmt @ line 6 @ col 4



STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: func line breaks sans trailing comma |
--------------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t16

STDOUT:


STDERR:
error: /home/profs/aycock/411/TEST/ms2/parse.t16:6:7: syntax error, unexpected ;, expecting ) or ","


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: func call line breaks with trailing commas |
--------------------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t17

STDOUT:
Program
    FuncDecl @ line 3 @ col 1
        Ident [foo] @ line 3 @ col 6
        FuncSign
            Params
            Type [$void]
        Block
            ExprStmt @ line 4 @ col 2
                FuncCall @ line 4 @ col 2
                    Ident [garbled] @ line 4 @ col 2
                    FuncArgs
                        Ident [a] @ line 4 @ col 10
                        Ident [b] @ line 5 @ col 3
                        Ident [c] @ line 6 @ col 3



STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: func call line breaks sans trailing comma |
-------------------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t18

STDOUT:


STDERR:
error: /home/profs/aycock/411/TEST/ms2/parse.t18:7:4: syntax error, unexpected ;, expecting ) or ","


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: legit syntax salad |
--------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t19

STDOUT:
Program
    FuncDecl @ line 3 @ col 1
        Ident [asdf] @ line 3 @ col 6
        FuncSign
            Params
            Type [$void]
        Block
            VarDecl @ line 4 @ col 2
                Ident [i] @ line 4 @ col 6
                Type [int] @ line 4 @ col 8
            EmptyStmt @ line 4 @ col 12
            AssignStmt @ line 6 @ col 2
                Ident [x] @ line 6 @ col 2
                IntLit [123] @ line 6 @ col 6
            ExprStmt @ line 7 @ col 2
                FuncCall @ line 7 @ col 2
                    Ident [foo] @ line 7 @ col 2
                    FuncArgs
                        Ident [d] @ line 7 @ col 6
            ExprStmt @ line 8 @ col 2
                FuncCall @ line 8 @ col 2
                    Ident [bar] @ line 8 @ col 5
                    FuncArgs
                        Ident [d] @ line 8 @ col 12
            ReturnStmt @ line 9 @ col 2
            ReturnStmt @ line 10 @ col 2
                IntLit [12345] @ line 10 @ col 9
            BreakStmt @ line 11 @ col 2
            Block
                ExprStmt @ line 13 @ col 3
                    Ident [ego] @ line 13 @ col 3
            IfStmt
                Ident [true] @ line 15 @ col 5
                Block
                    ExprStmt @ line 16 @ col 3
                        IntLit [42] @ line 16 @ col 3
            IfStmt
                Ident [false] @ line 18 @ col 5
                Block
                    ExprStmt @ line 19 @ col 3
                        IntLit [111] @ line 19 @ col 3
                IfStmt
                    Ident [fallse] @ line 20 @ col 12
                    Block
                        ExprStmt @ line 21 @ col 3
                            IntLit [222] @ line 21 @ col 3
                    Block
                        ExprStmt @ line 23 @ col 3
                            IntLit [333] @ line 23 @ col 3
            IfStmt
                Ident [false] @ line 25 @ col 6
                Block
                    ExprStmt @ line 26 @ col 3
                        IntLit [444] @ line 26 @ col 3
                Block
                    ExprStmt @ line 28 @ col 3
                        IntLit [555] @ line 28 @ col 3
            ForStmt @ line 30 @ col 2
                Ident [$true]
                Block
                    ExprStmt @ line 31 @ col 3
                        IntLit [666] @ line 31 @ col 3
            ForStmt @ line 33 @ col 2
                Ident [some_expr] @ line 33 @ col 6
                Block
                    ExprStmt @ line 34 @ col 3
                        IntLit [777] @ line 34 @ col 3
            AssignStmt @ line 37 @ col 2
                StrLit ["abc"] @ line 37 @ col 2
                Ident [def] @ line 37 @ col 10
            AssignStmt @ line 38 @ col 2
                BinaryExpr [==] @ line 38 @ col 12
                    BinaryExpr [+] @ line 38 @ col 7
                        Ident [asdf] @ line 38 @ col 2
                        IntLit [12] @ line 38 @ col 9
                    IntLit [4] @ line 38 @ col 15
                Ident [bcd] @ line 38 @ col 19



STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: assignment |
------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t20

STDOUT:


STDERR:
error: /home/profs/aycock/411/TEST/ms2/parse.t20:7:8: syntax error, unexpected =, expecting ;


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: associativity test |
--------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t21

STDOUT:
Program
    FuncDecl @ line 3 @ col 1
        Ident [a_sock] @ line 3 @ col 6
        FuncSign
            Params
            Type [$void]
        Block
            VarDecl @ line 4 @ col 2
                Ident [a] @ line 4 @ col 6
                Type [int] @ line 4 @ col 8
            VarDecl @ line 5 @ col 2
                Ident [b] @ line 5 @ col 6
                Type [int] @ line 5 @ col 8
            VarDecl @ line 6 @ col 2
                Ident [c] @ line 6 @ col 6
                Type [int] @ line 6 @ col 8
            VarDecl @ line 7 @ col 2
                Ident [d] @ line 7 @ col 6
                Type [int] @ line 7 @ col 8
            VarDecl @ line 8 @ col 2
                Ident [e] @ line 8 @ col 6
                Type [int] @ line 8 @ col 8
            ExprStmt @ line 10 @ col 2
                BinaryExpr [+] @ line 10 @ col 16
                    BinaryExpr [+] @ line 10 @ col 12
                        BinaryExpr [+] @ line 10 @ col 8
                            BinaryExpr [+] @ line 10 @ col 4
                                Ident [a] @ line 10 @ col 2
                                Ident [b] @ line 10 @ col 6
                            Ident [c] @ line 10 @ col 10
                        Ident [d] @ line 10 @ col 14
                    Ident [e] @ line 10 @ col 18
            ExprStmt @ line 11 @ col 2
                BinaryExpr [/] @ line 11 @ col 16
                    BinaryExpr [/] @ line 11 @ col 12
                        BinaryExpr [/] @ line 11 @ col 8
                            BinaryExpr [/] @ line 11 @ col 4
                                Ident [a] @ line 11 @ col 2
                                Ident [b] @ line 11 @ col 6
                            Ident [d] @ line 11 @ col 10
                        Ident [d] @ line 11 @ col 14
                    Ident [e] @ line 11 @ col 18



STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: a calculated move |
-------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/gen.t18

STDOUT:
Program
    FuncDecl @ line 5 @ col 1
        Ident [main] @ line 5 @ col 6
        FuncSign
            Params
            Type [$void]
        Block
            ExprStmt @ line 6 @ col 2
                FuncCall @ line 6 @ col 2
                    Ident [init] @ line 6 @ col 2
                    FuncArgs
            ExprStmt @ line 7 @ col 2
                FuncCall @ line 7 @ col 2
                    Ident [parser] @ line 7 @ col 2
                    FuncArgs
    GlobVarDecl @ line 14 @ col 1
        Ident [_havechar] @ line 14 @ col 5
        Type [bool] @ line 14 @ col 15
    GlobVarDecl @ line 15 @ col 1
        Ident [_char] @ line 15 @ col 5
        Type [int] @ line 15 @ col 11
    FuncDecl @ line 17 @ col 1
        Ident [getc] @ line 17 @ col 6
        FuncSign
            Params
            Type [int] @ line 17 @ col 13
        Block
            IfStmt
                Ident [_havechar] @ line 18 @ col 5
                Block
                    AssignStmt @ line 19 @ col 3
                        Ident [_havechar] @ line 19 @ col 3
                        Ident [false] @ line 19 @ col 15
                    ReturnStmt @ line 20 @ col 3
                        Ident [_char] @ line 20 @ col 10
            ReturnStmt @ line 22 @ col 2
                FuncCall @ line 22 @ col 9
                    Ident [getchar] @ line 22 @ col 9
                    FuncArgs
    FuncDecl @ line 25 @ col 1
        Ident [ungetc] @ line 25 @ col 6
        FuncSign
            Params
                ParamDecl @ line 25 @ col 13
                    Ident [ch] @ line 25 @ col 13
                    Type [int] @ line 25 @ col 16
            Type [$void]
        Block
            IfStmt
                Ident [_havechar] @ line 26 @ col 5
                Block
                    ExprStmt @ line 27 @ col 3
                        FuncCall @ line 27 @ col 3
                            Ident [prints] @ line 27 @ col 3
                            FuncArgs
                                StrLit ["Internal error: too many ungets!\n"] @ line 27 @ col 10
                    ExprStmt @ line 28 @ col 3
                        FuncCall @ line 28 @ col 3
                            Ident [halt] @ line 28 @ col 3
                            FuncArgs
            AssignStmt @ line 30 @ col 2
                Ident [_havechar] @ line 30 @ col 2
                Ident [true] @ line 30 @ col 14
            AssignStmt @ line 31 @ col 2
                Ident [_char] @ line 31 @ col 2
                Ident [ch] @ line 31 @ col 10
    GlobVarDecl @ line 38 @ col 1
        Ident [_havetoken] @ line 38 @ col 5
        Type [bool] @ line 38 @ col 16
    GlobVarDecl @ line 39 @ col 1
        Ident [_token] @ line 39 @ col 5
        Type [int] @ line 39 @ col 12
    GlobVarDecl @ line 40 @ col 1
        Ident [attr] @ line 40 @ col 5
        Type [int] @ line 40 @ col 10
    FuncDecl @ line 42 @ col 1
        Ident [peek] @ line 42 @ col 6
        FuncSign
            Params
            Type [int] @ line 42 @ col 13
        Block
            IfStmt
                Ident [_havetoken] @ line 43 @ col 5
                Block
                    ReturnStmt @ line 44 @ col 3
                        Ident [_token] @ line 44 @ col 10
            AssignStmt @ line 46 @ col 2
                Ident [_havetoken] @ line 46 @ col 2
                Ident [true] @ line 46 @ col 15
            AssignStmt @ line 47 @ col 2
                Ident [_token] @ line 47 @ col 2
                FuncCall @ line 47 @ col 11
                    Ident [scanner] @ line 47 @ col 11
                    FuncArgs
            ReturnStmt @ line 48 @ col 2
                Ident [_token] @ line 48 @ col 9
    FuncDecl @ line 51 @ col 1
        Ident [match] @ line 51 @ col 6
        FuncSign
            Params
                ParamDecl @ line 51 @ col 12
                    Ident [expect] @ line 51 @ col 12
                    Type [int] @ line 51 @ col 19
            Type [$void]
        Block
            IfStmt
                BinaryExpr [!=] @ line 52 @ col 12
                    FuncCall @ line 52 @ col 5
                        Ident [peek] @ line 52 @ col 5
                        FuncArgs
                    Ident [expect] @ line 52 @ col 15
                Block
                    ExprStmt @ line 53 @ col 3
                        FuncCall @ line 53 @ col 3
                            Ident [prints] @ line 53 @ col 3
                            FuncArgs
                                StrLit ["Error: expected "] @ line 53 @ col 10
                    ExprStmt @ line 54 @ col 3
                        FuncCall @ line 54 @ col 3
                            Ident [printc] @ line 54 @ col 3
                            FuncArgs
                                Ident [expect] @ line 54 @ col 10
                    ExprStmt @ line 55 @ col 3
                        FuncCall @ line 55 @ col 3
                            Ident [prints] @ line 55 @ col 3
                            FuncArgs
                                StrLit ["\n"] @ line 55 @ col 10
                    ExprStmt @ line 56 @ col 3
                        FuncCall @ line 56 @ col 3
                            Ident [halt] @ line 56 @ col 3
                            FuncArgs
            AssignStmt @ line 58 @ col 2
                Ident [_havetoken] @ line 58 @ col 2
                Ident [false] @ line 58 @ col 15
    FuncDecl @ line 61 @ col 1
        Ident [scanner] @ line 61 @ col 6
        FuncSign
            Params
            Type [int] @ line 61 @ col 16
        Block
            VarDecl @ line 62 @ col 2
                Ident [ch] @ line 62 @ col 6
                Type [int] @ line 62 @ col 9
            ForStmt @ line 64 @ col 2
                Ident [$true]
                Block
                    AssignStmt @ line 65 @ col 3
                        Ident [ch] @ line 65 @ col 3
                        FuncCall @ line 65 @ col 8
                            Ident [getc] @ line 65 @ col 8
                            FuncArgs
                    IfStmt
                        UnaryExpr [!] @ line 66 @ col 6
                            FuncCall @ line 66 @ col 7
                                Ident [isspace] @ line 66 @ col 7
                                FuncArgs
                                    Ident [ch] @ line 66 @ col 15
                        Block
                            BreakStmt @ line 67 @ col 4
            IfStmt
                BinaryExpr [==] @ line 71 @ col 8
                    Ident [ch] @ line 71 @ col 5
                    Ident [EOF] @ line 71 @ col 11
                Block
                    ReturnStmt @ line 71 @ col 19
                        Ident [TK_EOF] @ line 71 @ col 26
            IfStmt
                BinaryExpr [==] @ line 72 @ col 8
                    Ident [ch] @ line 72 @ col 5
                    Ident [ASCII_NL] @ line 72 @ col 11
                Block
                    ReturnStmt @ line 72 @ col 23
                        Ident [TK_EOLN] @ line 72 @ col 30
            IfStmt
                BinaryExpr [==] @ line 73 @ col 8
                    Ident [ch] @ line 73 @ col 5
                    Ident [ASCII_PLUS] @ line 73 @ col 11
                Block
                    ReturnStmt @ line 73 @ col 25
                        Ident [TK_ADD] @ line 73 @ col 32
            IfStmt
                BinaryExpr [==] @ line 74 @ col 8
                    Ident [ch] @ line 74 @ col 5
                    Ident [ASCII_MINUS] @ line 74 @ col 11
                Block
                    ReturnStmt @ line 74 @ col 26
                        Ident [TK_SUB] @ line 74 @ col 33
            IfStmt
                BinaryExpr [==] @ line 75 @ col 8
                    Ident [ch] @ line 75 @ col 5
                    Ident [ASCII_STAR] @ line 75 @ col 11
                Block
                    ReturnStmt @ line 75 @ col 25
                        Ident [TK_MUL] @ line 75 @ col 32
            IfStmt
                BinaryExpr [==] @ line 76 @ col 8
                    Ident [ch] @ line 76 @ col 5
                    Ident [ASCII_SLASH] @ line 76 @ col 11
                Block
                    ReturnStmt @ line 76 @ col 26
                        Ident [TK_DIV] @ line 76 @ col 33
            IfStmt
                BinaryExpr [==] @ line 77 @ col 8
                    Ident [ch] @ line 77 @ col 5
                    Ident [ASCII_LPAREN] @ line 77 @ col 11
                Block
                    ReturnStmt @ line 77 @ col 27
                        Ident [TK_LPAREN] @ line 77 @ col 34
            IfStmt
                BinaryExpr [==] @ line 78 @ col 8
                    Ident [ch] @ line 78 @ col 5
                    Ident [ASCII_RPAREN] @ line 78 @ col 11
                Block
                    ReturnStmt @ line 78 @ col 27
                        Ident [TK_RPAREN] @ line 78 @ col 34
            IfStmt
                FuncCall @ line 80 @ col 5
                    Ident [isdigit] @ line 80 @ col 5
                    FuncArgs
                        Ident [ch] @ line 80 @ col 13
                Block
                    AssignStmt @ line 81 @ col 3
                        Ident [attr] @ line 81 @ col 3
                        IntLit [0] @ line 81 @ col 10
                    ForStmt @ line 82 @ col 3
                        FuncCall @ line 82 @ col 7
                            Ident [isdigit] @ line 82 @ col 7
                            FuncArgs
                                Ident [ch] @ line 82 @ col 15
                        Block
                            AssignStmt @ line 83 @ col 4
                                Ident [attr] @ line 83 @ col 4
                                BinaryExpr [+] @ line 83 @ col 21
                                    BinaryExpr [*] @ line 83 @ col 16
                                        Ident [attr] @ line 83 @ col 11
                                        IntLit [10] @ line 83 @ col 18
                                    BinaryExpr [-] @ line 83 @ col 27
                                        Ident [ch] @ line 83 @ col 24
                                        Ident [ASCII_0] @ line 83 @ col 29
                            AssignStmt @ line 84 @ col 4
                                Ident [ch] @ line 84 @ col 4
                                FuncCall @ line 84 @ col 9
                                    Ident [getc] @ line 84 @ col 9
                                    FuncArgs
                    ExprStmt @ line 86 @ col 3
                        FuncCall @ line 86 @ col 3
                            Ident [ungetc] @ line 86 @ col 3
                            FuncArgs
                                Ident [ch] @ line 86 @ col 10
                    ReturnStmt @ line 87 @ col 3
                        Ident [TK_NUMBER] @ line 87 @ col 10
            ExprStmt @ line 90 @ col 2
                FuncCall @ line 90 @ col 2
                    Ident [prints] @ line 90 @ col 2
                    FuncArgs
                        StrLit ["Error: invalid character.\n"] @ line 90 @ col 9
            ExprStmt @ line 91 @ col 2
                FuncCall @ line 91 @ col 2
                    Ident [halt] @ line 91 @ col 2
                    FuncArgs
    FuncDecl @ line 94 @ col 1
        Ident [isdigit] @ line 94 @ col 6
        FuncSign
            Params
                ParamDecl @ line 94 @ col 14
                    Ident [ch] @ line 94 @ col 14
                    Type [int] @ line 94 @ col 17
            Type [bool] @ line 94 @ col 22
        Block
            ReturnStmt @ line 95 @ col 2
                BinaryExpr [&&] @ line 95 @ col 9
                    BinaryExpr [>=] @ line 95 @ col 12
                        Ident [ch] @ line 95 @ col 9
                        Ident [ASCII_0] @ line 95 @ col 15
                    BinaryExpr [<=] @ line 95 @ col 29
                        Ident [ch] @ line 95 @ col 26
                        Ident [ASCII_9] @ line 95 @ col 32
    FuncDecl @ line 98 @ col 1
        Ident [isspace] @ line 98 @ col 6
        FuncSign
            Params
                ParamDecl @ line 98 @ col 14
                    Ident [ch] @ line 98 @ col 14
                    Type [int] @ line 98 @ col 17
            Type [bool] @ line 98 @ col 22
        Block
            ReturnStmt @ line 99 @ col 2
                BinaryExpr [||] @ line 99 @ col 9
                    BinaryExpr [||] @ line 99 @ col 9
                        BinaryExpr [==] @ line 99 @ col 12
                            Ident [ch] @ line 99 @ col 9
                            Ident [ASCII_SPACE] @ line 99 @ col 15
                        BinaryExpr [==] @ line 100 @ col 12
                            Ident [ch] @ line 100 @ col 9
                            Ident [ASCII_TAB] @ line 100 @ col 15
                    BinaryExpr [==] @ line 101 @ col 12
                        Ident [ch] @ line 101 @ col 9
                        Ident [ASCII_CR] @ line 101 @ col 15
    FuncDecl @ line 108 @ col 1
        Ident [parser] @ line 108 @ col 6
        FuncSign
            Params
            Type [$void]
        Block
            VarDecl @ line 109 @ col 2
                Ident [result] @ line 109 @ col 6
                Type [int] @ line 109 @ col 13
            ForStmt @ line 111 @ col 2
                BinaryExpr [!=] @ line 111 @ col 13
                    FuncCall @ line 111 @ col 6
                        Ident [peek] @ line 111 @ col 6
                        FuncArgs
                    Ident [TK_EOF] @ line 111 @ col 16
                Block
                    AssignStmt @ line 112 @ col 3
                        Ident [result] @ line 112 @ col 3
                        FuncCall @ line 112 @ col 12
                            Ident [E] @ line 112 @ col 12
                            FuncArgs
                    ExprStmt @ line 113 @ col 3
                        FuncCall @ line 113 @ col 3
                            Ident [match] @ line 113 @ col 3
                            FuncArgs
                                Ident [TK_EOLN] @ line 113 @ col 9
                    ExprStmt @ line 115 @ col 3
                        FuncCall @ line 115 @ col 3
                            Ident [prints] @ line 115 @ col 3
                            FuncArgs
                                StrLit [" = "] @ line 115 @ col 10
                    ExprStmt @ line 116 @ col 3
                        FuncCall @ line 116 @ col 3
                            Ident [printi] @ line 116 @ col 3
                            FuncArgs
                                Ident [result] @ line 116 @ col 10
                    ExprStmt @ line 117 @ col 3
                        FuncCall @ line 117 @ col 3
                            Ident [prints] @ line 117 @ col 3
                            FuncArgs
                                StrLit ["\n"] @ line 117 @ col 10
    FuncDecl @ line 121 @ col 1
        Ident [E] @ line 121 @ col 6
        FuncSign
            Params
            Type [int] @ line 121 @ col 10
        Block
            VarDecl @ line 122 @ col 2
                Ident [l] @ line 122 @ col 6
                Type [int] @ line 122 @ col 8
            VarDecl @ line 123 @ col 2
                Ident [r] @ line 123 @ col 6
                Type [int] @ line 123 @ col 8
            VarDecl @ line 124 @ col 2
                Ident [token] @ line 124 @ col 6
                Type [int] @ line 124 @ col 12
            AssignStmt @ line 126 @ col 2
                Ident [l] @ line 126 @ col 2
                FuncCall @ line 126 @ col 6
                    Ident [T] @ line 126 @ col 6
                    FuncArgs
            ForStmt @ line 127 @ col 2
                BinaryExpr [||] @ line 127 @ col 6
                    BinaryExpr [==] @ line 127 @ col 13
                        FuncCall @ line 127 @ col 6
                            Ident [peek] @ line 127 @ col 6
                            FuncArgs
                        Ident [TK_ADD] @ line 127 @ col 16
                    BinaryExpr [==] @ line 127 @ col 33
                        FuncCall @ line 127 @ col 26
                            Ident [peek] @ line 127 @ col 26
                            FuncArgs
                        Ident [TK_SUB] @ line 127 @ col 36
                Block
                    AssignStmt @ line 128 @ col 3
                        Ident [token] @ line 128 @ col 3
                        FuncCall @ line 128 @ col 11
                            Ident [peek] @ line 128 @ col 11
                            FuncArgs
                    ExprStmt @ line 129 @ col 3
                        FuncCall @ line 129 @ col 3
                            Ident [match] @ line 129 @ col 3
                            FuncArgs
                                Ident [token] @ line 129 @ col 9
                    AssignStmt @ line 130 @ col 3
                        Ident [r] @ line 130 @ col 3
                        FuncCall @ line 130 @ col 7
                            Ident [T] @ line 130 @ col 7
                            FuncArgs
                    IfStmt
                        BinaryExpr [==] @ line 132 @ col 12
                            Ident [token] @ line 132 @ col 6
                            Ident [TK_ADD] @ line 132 @ col 15
                        Block
                            AssignStmt @ line 133 @ col 4
                                Ident [l] @ line 133 @ col 4
                                BinaryExpr [+] @ line 133 @ col 10
                                    Ident [l] @ line 133 @ col 8
                                    Ident [r] @ line 133 @ col 12
                        Block
                            AssignStmt @ line 135 @ col 4
                                Ident [l] @ line 135 @ col 4
                                BinaryExpr [-] @ line 135 @ col 10
                                    Ident [l] @ line 135 @ col 8
                                    Ident [r] @ line 135 @ col 12
            ReturnStmt @ line 138 @ col 2
                Ident [l] @ line 138 @ col 9
    FuncDecl @ line 141 @ col 1
        Ident [T] @ line 141 @ col 6
        FuncSign
            Params
            Type [int] @ line 141 @ col 10
        Block
            VarDecl @ line 142 @ col 2
                Ident [l] @ line 142 @ col 6
                Type [int] @ line 142 @ col 8
            VarDecl @ line 143 @ col 2
                Ident [r] @ line 143 @ col 6
                Type [int] @ line 143 @ col 8
            VarDecl @ line 144 @ col 2
                Ident [token] @ line 144 @ col 6
                Type [int] @ line 144 @ col 12
            AssignStmt @ line 146 @ col 2
                Ident [l] @ line 146 @ col 2
                FuncCall @ line 146 @ col 6
                    Ident [F] @ line 146 @ col 6
                    FuncArgs
            ForStmt @ line 147 @ col 2
                BinaryExpr [||] @ line 147 @ col 6
                    BinaryExpr [==] @ line 147 @ col 13
                        FuncCall @ line 147 @ col 6
                            Ident [peek] @ line 147 @ col 6
                            FuncArgs
                        Ident [TK_MUL] @ line 147 @ col 16
                    BinaryExpr [==] @ line 147 @ col 33
                        FuncCall @ line 147 @ col 26
                            Ident [peek] @ line 147 @ col 26
                            FuncArgs
                        Ident [TK_DIV] @ line 147 @ col 36
                Block
                    AssignStmt @ line 148 @ col 3
                        Ident [token] @ line 148 @ col 3
                        FuncCall @ line 148 @ col 11
                            Ident [peek] @ line 148 @ col 11
                            FuncArgs
                    ExprStmt @ line 149 @ col 3
                        FuncCall @ line 149 @ col 3
                            Ident [match] @ line 149 @ col 3
                            FuncArgs
                                Ident [token] @ line 149 @ col 9
                    AssignStmt @ line 150 @ col 3
                        Ident [r] @ line 150 @ col 3
                        FuncCall @ line 150 @ col 7
                            Ident [F] @ line 150 @ col 7
                            FuncArgs
                    IfStmt
                        BinaryExpr [==] @ line 152 @ col 12
                            Ident [token] @ line 152 @ col 6
                            Ident [TK_MUL] @ line 152 @ col 15
                        Block
                            AssignStmt @ line 153 @ col 4
                                Ident [l] @ line 153 @ col 4
                                BinaryExpr [*] @ line 153 @ col 10
                                    Ident [l] @ line 153 @ col 8
                                    Ident [r] @ line 153 @ col 12
                        Block
                            AssignStmt @ line 155 @ col 4
                                Ident [l] @ line 155 @ col 4
                                BinaryExpr [/] @ line 155 @ col 10
                                    Ident [l] @ line 155 @ col 8
                                    Ident [r] @ line 155 @ col 12
            ReturnStmt @ line 158 @ col 2
                Ident [l] @ line 158 @ col 9
    FuncDecl @ line 161 @ col 1
        Ident [F] @ line 161 @ col 6
        FuncSign
            Params
            Type [int] @ line 161 @ col 10
        Block
            VarDecl @ line 162 @ col 2
                Ident [result] @ line 162 @ col 6
                Type [int] @ line 162 @ col 13
            VarDecl @ line 164 @ col 2
                Ident [token] @ line 164 @ col 6
                Type [int] @ line 164 @ col 12
            AssignStmt @ line 165 @ col 2
                Ident [token] @ line 165 @ col 2
                FuncCall @ line 165 @ col 10
                    Ident [peek] @ line 165 @ col 10
                    FuncArgs
            IfStmt
                BinaryExpr [==] @ line 167 @ col 11
                    Ident [token] @ line 167 @ col 5
                    Ident [TK_LPAREN] @ line 167 @ col 14
                Block
                    ExprStmt @ line 168 @ col 3
                        FuncCall @ line 168 @ col 3
                            Ident [match] @ line 168 @ col 3
                            FuncArgs
                                Ident [TK_LPAREN] @ line 168 @ col 9
                    AssignStmt @ line 169 @ col 3
                        Ident [result] @ line 169 @ col 3
                        FuncCall @ line 169 @ col 12
                            Ident [E] @ line 169 @ col 12
                            FuncArgs
                    ExprStmt @ line 170 @ col 3
                        FuncCall @ line 170 @ col 3
                            Ident [match] @ line 170 @ col 3
                            FuncArgs
                                Ident [TK_RPAREN] @ line 170 @ col 9
                IfStmt
                    BinaryExpr [==] @ line 172 @ col 18
                        Ident [token] @ line 172 @ col 12
                        Ident [TK_SUB] @ line 172 @ col 21
                    Block
                        ExprStmt @ line 173 @ col 3
                            FuncCall @ line 173 @ col 3
                                Ident [match] @ line 173 @ col 3
                                FuncArgs
                                    Ident [TK_SUB] @ line 173 @ col 9
                        AssignStmt @ line 174 @ col 3
                            Ident [result] @ line 174 @ col 3
                            UnaryExpr [-] @ line 174 @ col 12
                                FuncCall @ line 174 @ col 13
                                    Ident [F] @ line 174 @ col 13
                                    FuncArgs
                    IfStmt
                        BinaryExpr [==] @ line 176 @ col 18
                            Ident [token] @ line 176 @ col 12
                            Ident [TK_NUMBER] @ line 176 @ col 21
                        Block
                            ExprStmt @ line 177 @ col 3
                                FuncCall @ line 177 @ col 3
                                    Ident [match] @ line 177 @ col 3
                                    FuncArgs
                                        Ident [TK_NUMBER] @ line 177 @ col 9
                            AssignStmt @ line 178 @ col 3
                                Ident [result] @ line 178 @ col 3
                                Ident [attr] @ line 178 @ col 12
                        Block
                            ExprStmt @ line 181 @ col 3
                                FuncCall @ line 181 @ col 3
                                    Ident [prints] @ line 181 @ col 3
                                    FuncArgs
                                        StrLit ["Error: expected factor.\n"] @ line 181 @ col 10
                            ExprStmt @ line 182 @ col 3
                                FuncCall @ line 182 @ col 3
                                    Ident [halt] @ line 182 @ col 3
                                    FuncArgs
            ReturnStmt @ line 184 @ col 2
                Ident [result] @ line 184 @ col 9
    GlobVarDecl @ line 191 @ col 1
        Ident [EOF] @ line 191 @ col 5
        Type [int] @ line 191 @ col 9
    GlobVarDecl @ line 193 @ col 1
        Ident [TK_EOF] @ line 193 @ col 5
        Type [int] @ line 193 @ col 12
    GlobVarDecl @ line 194 @ col 1
        Ident [TK_EOLN] @ line 194 @ col 5
        Type [int] @ line 194 @ col 13
    GlobVarDecl @ line 195 @ col 1
        Ident [TK_NUMBER] @ line 195 @ col 5
        Type [int] @ line 195 @ col 15
    GlobVarDecl @ line 196 @ col 1
        Ident [TK_ADD] @ line 196 @ col 5
        Type [int] @ line 196 @ col 12
    GlobVarDecl @ line 197 @ col 1
        Ident [TK_SUB] @ line 197 @ col 5
        Type [int] @ line 197 @ col 12
    GlobVarDecl @ line 198 @ col 1
        Ident [TK_MUL] @ line 198 @ col 5
        Type [int] @ line 198 @ col 12
    GlobVarDecl @ line 199 @ col 1
        Ident [TK_DIV] @ line 199 @ col 5
        Type [int] @ line 199 @ col 12
    GlobVarDecl @ line 200 @ col 1
        Ident [TK_LPAREN] @ line 200 @ col 5
        Type [int] @ line 200 @ col 15
    GlobVarDecl @ line 201 @ col 1
        Ident [TK_RPAREN] @ line 201 @ col 5
        Type [int] @ line 201 @ col 15
    GlobVarDecl @ line 203 @ col 1
        Ident [ASCII_0] @ line 203 @ col 5
        Type [int] @ line 203 @ col 13
    GlobVarDecl @ line 204 @ col 1
        Ident [ASCII_9] @ line 204 @ col 5
        Type [int] @ line 204 @ col 13
    GlobVarDecl @ line 205 @ col 1
        Ident [ASCII_PLUS] @ line 205 @ col 5
        Type [int] @ line 205 @ col 16
    GlobVarDecl @ line 206 @ col 1
        Ident [ASCII_MINUS] @ line 206 @ col 5
        Type [int] @ line 206 @ col 17
    GlobVarDecl @ line 207 @ col 1
        Ident [ASCII_STAR] @ line 207 @ col 5
        Type [int] @ line 207 @ col 16
    GlobVarDecl @ line 208 @ col 1
        Ident [ASCII_SLASH] @ line 208 @ col 5
        Type [int] @ line 208 @ col 17
    GlobVarDecl @ line 209 @ col 1
        Ident [ASCII_LPAREN] @ line 209 @ col 5
        Type [int] @ line 209 @ col 18
    GlobVarDecl @ line 210 @ col 1
        Ident [ASCII_RPAREN] @ line 210 @ col 5
        Type [int] @ line 210 @ col 18
    GlobVarDecl @ line 211 @ col 1
        Ident [ASCII_SPACE] @ line 211 @ col 5
        Type [int] @ line 211 @ col 17
    GlobVarDecl @ line 212 @ col 1
        Ident [ASCII_TAB] @ line 212 @ col 5
        Type [int] @ line 212 @ col 15
    GlobVarDecl @ line 213 @ col 1
        Ident [ASCII_CR] @ line 213 @ col 5
        Type [int] @ line 213 @ col 14
    GlobVarDecl @ line 214 @ col 1
        Ident [ASCII_NL] @ line 214 @ col 5
        Type [int] @ line 214 @ col 14
    FuncDecl @ line 216 @ col 1
        Ident [init] @ line 216 @ col 6
        FuncSign
            Params
            Type [$void]
        Block
            AssignStmt @ line 217 @ col 2
                Ident [EOF] @ line 217 @ col 2
                IntLit [-1] @ line 217 @ col 8
            AssignStmt @ line 219 @ col 2
                Ident [ASCII_0] @ line 219 @ col 2
                IntLit [48] @ line 219 @ col 12
            AssignStmt @ line 220 @ col 2
                Ident [ASCII_9] @ line 220 @ col 2
                IntLit [57] @ line 220 @ col 12
            AssignStmt @ line 221 @ col 2
                Ident [ASCII_PLUS] @ line 221 @ col 2
                IntLit [43] @ line 221 @ col 15
            AssignStmt @ line 222 @ col 2
                Ident [ASCII_MINUS] @ line 222 @ col 2
                IntLit [45] @ line 222 @ col 16
            AssignStmt @ line 223 @ col 2
                Ident [ASCII_STAR] @ line 223 @ col 2
                IntLit [42] @ line 223 @ col 15
            AssignStmt @ line 224 @ col 2
                Ident [ASCII_SLASH] @ line 224 @ col 2
                IntLit [47] @ line 224 @ col 16
            AssignStmt @ line 225 @ col 2
                Ident [ASCII_LPAREN] @ line 225 @ col 2
                IntLit [40] @ line 225 @ col 17
            AssignStmt @ line 226 @ col 2
                Ident [ASCII_RPAREN] @ line 226 @ col 2
                IntLit [41] @ line 226 @ col 17
            AssignStmt @ line 227 @ col 2
                Ident [ASCII_SPACE] @ line 227 @ col 2
                IntLit [32] @ line 227 @ col 16
            AssignStmt @ line 228 @ col 2
                Ident [ASCII_TAB] @ line 228 @ col 2
                IntLit [9] @ line 228 @ col 14
            AssignStmt @ line 229 @ col 2
                Ident [ASCII_CR] @ line 229 @ col 2
                IntLit [13] @ line 229 @ col 13
            AssignStmt @ line 230 @ col 2
                Ident [ASCII_NL] @ line 230 @ col 2
                IntLit [10] @ line 230 @ col 13
            AssignStmt @ line 232 @ col 2
                Ident [TK_EOF] @ line 232 @ col 2
                IntLit [256] @ line 232 @ col 11
            AssignStmt @ line 233 @ col 2
                Ident [TK_NUMBER] @ line 233 @ col 2
                IntLit [257] @ line 233 @ col 14
            AssignStmt @ line 234 @ col 2
                Ident [TK_ADD] @ line 234 @ col 2
                Ident [ASCII_PLUS] @ line 234 @ col 11
            AssignStmt @ line 235 @ col 2
                Ident [TK_SUB] @ line 235 @ col 2
                Ident [ASCII_MINUS] @ line 235 @ col 11
            AssignStmt @ line 236 @ col 2
                Ident [TK_MUL] @ line 236 @ col 2
                Ident [ASCII_STAR] @ line 236 @ col 11
            AssignStmt @ line 237 @ col 2
                Ident [TK_DIV] @ line 237 @ col 2
                Ident [ASCII_SLASH] @ line 237 @ col 11
            AssignStmt @ line 238 @ col 2
                Ident [TK_LPAREN] @ line 238 @ col 2
                Ident [ASCII_LPAREN] @ line 238 @ col 14
            AssignStmt @ line 239 @ col 2
                Ident [TK_RPAREN] @ line 239 @ col 2
                Ident [ASCII_RPAREN] @ line 239 @ col 14
            AssignStmt @ line 240 @ col 2
                Ident [TK_EOLN] @ line 240 @ col 2
                Ident [ASCII_NL] @ line 240 @ col 12



STDERR:


RETURN CODE: 0

Run ended on Thu Feb 23 15:37:33 2023

